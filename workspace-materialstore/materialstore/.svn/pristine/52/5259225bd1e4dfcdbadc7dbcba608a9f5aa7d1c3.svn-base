/**  
 * @Title: GoodsServiceImpl.java
 * @Package com.youzhicai.materialstore.service.impl
 * @Description: TODO(用一句话描述该文件做什么)
 * @author XieXianpeng
 * @date 2018年9月20日 下午5:08:33
 * @version V1.0  
 */
package com.youzhicai.materialstore.service.impl;

import static com.youzhicai.materialstore.common.constant.GoodsTypeStatus.NORMAL;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.youzhicai.materialstore.common.constant.GoodsConstant;
import com.youzhicai.materialstore.common.constant.GoodsTypeStatus;
import com.youzhicai.materialstore.common.constant.ParamLength;
import com.youzhicai.materialstore.common.exception.Assertion;
import com.youzhicai.materialstore.common.exception.Error;
import com.youzhicai.materialstore.common.util.CodeUtil;
import com.youzhicai.materialstore.common.util.POUtil;
import com.youzhicai.materialstore.dao.GoodsApproveDAO;
import com.youzhicai.materialstore.dao.GoodsDAO;
import com.youzhicai.materialstore.dao.GoodsSupplyDAO;
import com.youzhicai.materialstore.dao.GoodsTypeDAO;
import com.youzhicai.materialstore.dto.GoodsApproveDTO;
import com.youzhicai.materialstore.dto.GoodsDTO;
import com.youzhicai.materialstore.dto.GoodsSupplyDTO;
import com.youzhicai.materialstore.po.GoodsApprovePO;
import com.youzhicai.materialstore.po.GoodsPO;
import com.youzhicai.materialstore.po.GoodsSupplyPO;
import com.youzhicai.materialstore.po.GoodsTypePO;
import com.youzhicai.materialstore.service.GoodsService;
import com.youzhicai.materialstore.vo.GoodsAPIVO;

/**
 * @ClassName: GoodsServiceImpl
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author XieXianpeng
 * @date 2018年9月20日 下午5:08:33
 */
@Service
public class GoodsServiceImpl implements GoodsService {

    @Autowired
    private GoodsTypeDAO goodsTypeDAO;

    @Autowired
    private GoodsDAO goodsDAO;

    @Autowired
    private GoodsSupplyDAO goodsSupplyDAO;

    @Autowired
    private GoodsApproveDAO goodsApproveDAO;

    private Map<String, Object> queryGoodsTypeMap(Map<String, Object> queryMap, GoodsTypeStatus goodsTypeStatus, String companyId) {
        queryMap.put("status", goodsTypeStatus.getValue());
        queryMap.put("companyId", companyId);
        return queryMap;
    }

    /*
     * 物资查询参数
     */
    private Map<String, Object> queryGoodsTypeByIdMap(Long id, GoodsTypeStatus goodsTypeStatus, String companyId) {
        Map<String, Object> queryMap = new HashMap<String, Object>();
        queryMap.put("id", id);
        return queryGoodsTypeMap(queryMap, goodsTypeStatus, companyId);
    }

    /*
     * 物资查询参数
     */
    private Map<String, Object> queryGoodsTypeByTidMap(Long tid, GoodsTypeStatus goodsTypeStatus, String companyId) {
        Map<String, Object> queryMap = new HashMap<String, Object>();
        queryMap.put("tid", tid);
        return queryGoodsTypeMap(queryMap, goodsTypeStatus, companyId);
    }

    /*
     * @Title: nextGoodsCode
     * @Description: TODO(这里用一句话描述这个方法的作用)
     * @param goodsDTO
     * @return
     * @see com.youzhicai.materialstore.service.GoodsService#nextGoodsCode(com.youzhicai.materialstore.dto.GoodsDTO)
     */
    @Override
    public Map<String, Object> nextGoodsCode(GoodsDTO goodsDTO) {
        Long tid;
        String companyId;
        if ((tid = goodsDTO.getTid()) == null || StringUtils.isBlank(companyId = goodsDTO.getCompanyId())
                || goodsTypeDAO.findGoodsTypeById(queryGoodsTypeByIdMap(tid, NORMAL, companyId)) == null) {
            // 参数异常
            throw new RuntimeException("参数异常");
        }

        // 当前分类下所有商品
        Map<String, Object> queryMap = new HashMap<String, Object>();
        queryMap.put("tid", tid);
        queryMap.put("companyId", companyId);
        List<Integer> codes = goodsDAO.findSubCodeList(queryMap);

        Map<String, Object> resultMap = new HashMap<String, Object>();
        resultMap.put("code", CodeUtil.newCode(codes, GoodsConstant.CODE_LIMIT));

        return resultMap;
    }

    /*
     * @Title: addGoods
     * @Description: TODO(这里用一句话描述这个方法的作用)
     * @param goodsDTO
     * @return
     * @see com.youzhicai.materialstore.service.GoodsService#addGoods(com.youzhicai.materialstore.dto.GoodsDTO)
     */
    @Transactional
    @Override
    public boolean addGoods(GoodsDTO goodsDTO) {
        GoodsPO goodsPO = initGoodsPO(goodsDTO);

        if (goodsDAO.save(goodsPO) < 1) {
            Assertion.ERROR(Error.GOODS_FAIL_ADD);
        }

        // 审核意见
        GoodsApproveDTO goodsApproveDTO = goodsDTO.getGoodsApprove();
        Integer status;
        Assertion.NULL(goodsApproveDTO, (status = goodsApproveDTO.getStatus()));
        GoodsApprovePO goodsApprovePO = new GoodsApprovePO();
        goodsApprovePO.setGid(goodsPO.getId());
        goodsApprovePO.setStatus(status);
        if (goodsApproveDAO.save(goodsApprovePO) < 1) {
            Assertion.ERROR(Error.GOODS_FAIL_ADD);
        }

        // 可扩展属性
        List<GoodsSupplyDTO> goodsSupplys = goodsDTO.getGoodsSupplys();
        if (goodsSupplys != null && !goodsSupplys.isEmpty()) {
            addGoodsSupply(goodsSupplys, goodsPO.getId());
        }

        return true;
    }

    /*
     * 保存物资扩展属性
     */
    @Transactional
    private void addGoodsSupply(List<GoodsSupplyDTO> goodsSupplys, long newGoodsId) {
        GoodsSupplyPO goodsSupplyPO;
        for (GoodsSupplyDTO goodsSupplyDTO : goodsSupplys) {
            // 添加物资扩展属性
            Integer style;
            String name;
            Assertion.NULL(style = goodsSupplyDTO.getStyle(), name = goodsSupplyDTO.getName());

            goodsSupplyPO = new GoodsSupplyPO();
            String value;
            if (style == 1) {
                Assertion.NULL(value = goodsSupplyDTO.getValue());
                goodsSupplyPO.setValue(value);
            }

            goodsSupplyPO.setGid(newGoodsId);
            goodsSupplyPO.setStyle(style);
            goodsSupplyPO.setName(name);
            goodsSupplyPO.setStatus(1);

            goodsSupplyDAO.save(goodsSupplyPO);
        }
    }

    /*
     * 完善物资信息
     */
    private GoodsPO initGoodsPO(GoodsDTO goodsDTO) {
        Integer used;// 使用状态(必填项)
        String name;// 物资名称(必填项)
        String code;// 物资编码(必填项)
        Long tid;// 物资分类(必填项)
        String unit;// 计量单位(必填项)
        String companyId;
        String companyName;

        Assertion.NULL(used = goodsDTO.getUsed(), name = goodsDTO.getName(), code = goodsDTO.getCode(), tid = goodsDTO.getTid(),
                unit = goodsDTO.getUnit(), companyId = goodsDTO.getCompanyId(), companyName = goodsDTO.getCompanyName());
        // 验证分类ID
        if (goodsTypeDAO.findGoodsTypeById(queryGoodsTypeByIdMap(tid, NORMAL, companyId)) == null) {
            Assertion.ERROR(Error.GOODS_UNABLE_TID);
        }

        // code是否已被占用
        Map<String, Object> queryMap = new HashMap<String, Object>();
        queryMap.put("tid", tid);
        queryMap.put("code", code);
        queryMap.put("companyId", companyId);
        if (goodsDAO.findOneByTidAndCode(queryMap) != null) {
            Assertion.ERROR(Error.GOODS_REPEAT_CODE);
        }

        Assertion.LIMIT(name, ParamLength.GOODS_NAME, Error.GOODS_NAME_LIMIT);
        Assertion.LIMIT(unit, ParamLength.GOODS_UNIT, Error.GOODS_UNIT_LIMIT);

        String brand = goodsDTO.getBrand();
        Assertion.LIMIT(brand, ParamLength.GOODS_BRAND, Error.GOODS_BRAND_LIMIT);

        String specifications = goodsDTO.getSpecifications();
        Assertion.LIMIT(specifications, ParamLength.GOODS_SPECIFICATIONS, Error.GOODS_SPECIFICATIONS_LIMIT);

        String remarks = goodsDTO.getRemarks();
        Assertion.LIMIT(remarks, ParamLength.GOODS_REMARKS, Error.GOODS_REMARKS_LIMIT);

        String link = goodsDTO.getLink();

        // 添加物资
        GoodsPO goodsPO = new GoodsPO();
        goodsPO.setUsed(used);
        goodsPO.setName(name);
        goodsPO.setCode(code);
        goodsPO.setTid(tid);
        goodsPO.setUnit(unit);
        goodsPO.setCompanyId(companyId);
        goodsPO.setCompanyName(companyName);

        goodsPO.setBrand(brand);
        goodsPO.setSpecifications(specifications);
        goodsPO.setRemarks(remarks);
        goodsPO.setLink(link);
        goodsPO.setCreateId(goodsDTO.getCreateId());
        goodsPO.setCreator(goodsDTO.getCreator());

        goodsPO.setStatus(1);

        return goodsPO;
    }

    /*
     * @Title: checkCodes
     * @Description: TODO(这里用一句话描述这个方法的作用)
     * @param goodsDTO
     * @return
     * @see com.youzhicai.materialstore.service.GoodsService#checkCodes(com.youzhicai.materialstore.dto.GoodsDTO)
     */
    @Override
    public List<GoodsAPIVO> checkCodes(GoodsDTO goodsDTO) {
        String companyId;
        String[] codes;
        if (StringUtils.isBlank(companyId = goodsDTO.getCompanyId()) || (codes = goodsDTO.getCodes()) == null || codes.length == 0) {
            return new ArrayList<>();
        }

        List<GoodsAPIVO> result = new ArrayList<GoodsAPIVO>();

        GoodsAPIVO goodsVO;
        for (String code : codes) {
            if (StringUtils.isBlank(code) || code.length() != 12) {// 标准编码格式：BG0100100001
                continue;
            }

            // 查询物资类型ID
            Map<String, Object> queryMap = new HashMap<String, Object>();
            queryMap.put("firstRankCode", code.substring(0, 2));
            queryMap.put("secondRankCode", code.substring(2, 4));
            queryMap.put("thirdRankCode", code.substring(4, 7));
            queryMap.put("companyId", companyId);
            GoodsTypePO goodsTypePO = goodsTypeDAO.findThirdRankOneByCodes(queryMap);

            if (goodsTypePO == null) {
                continue;
            }

            // 物资是否存在
            Map<String, Object> queryGoodsMap = new HashMap<String, Object>();
            queryGoodsMap.put("tid", goodsTypePO.getId());
            queryGoodsMap.put("code", code.substring(7, 12));
            queryGoodsMap.put("companyId", companyId);
            GoodsPO goodsPO = goodsDAO.findOneByTidAndCode(queryGoodsMap);
            if (goodsPO != null) {
                goodsVO = POUtil.convert(goodsPO, GoodsAPIVO.class);
                Map<String, Object> queryGoodsTypeCodesMap = new HashMap<String, Object>();
                queryGoodsTypeCodesMap.put("thirdRankId", goodsTypePO.getId());
                queryGoodsTypeCodesMap.put("companyId", companyId);
                Map<String, String> allRankCodes = goodsTypeDAO.findAllRankCodes(queryGoodsTypeCodesMap);
                if (allRankCodes != null) {
                    goodsVO.setTypeCodes(allRankCodes.get("firstRankCode") + allRankCodes.get("secondRankCode") + allRankCodes.get("thirdRankCode"));
                }
                result.add(goodsVO);
            }
        }

        return result;
    }

}
